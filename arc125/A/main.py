#!/usr/bin/env python3
# Generated by AtCoder Tools 2.8.0
# Copyright 2021 Yuichiro Smith
import sys
from itertools import chain


def solve(N: int, M: int, S: "List[int]", T: "List[int]"):
    if not set(S).issuperset(T):
        print(-1)
        return
    opp_cost = N
    for i, (left, right) in enumerate(zip(S[1:], S[-1:0:-1])):
        if left != S[0] or right != S[0]:
            opp_cost = i+1
            break
    answer = M
    move = False
    prev = S[0]
    for b in T:
        diff = b != prev
        if not diff:
            continue
        prev = b
        if move:
            answer += 1
        else:
            answer += opp_cost
            move = True
    print(answer)
    return


def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    S = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    T = [int(next(tokens)) for _ in range(M)]  # type: "List[int]"
    solve(N, M, S, T)


if __name__ == '__main__':
    main()
