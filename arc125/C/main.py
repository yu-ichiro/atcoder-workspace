#!/usr/bin/env python3
# Generated by AtCoder Tools 2.8.0
# Copyright 2021 Yuichiro Smith
import sys


def solve(N: int, K: int, A: "List[int]"):
    unused = set(range(1, N+1))
    right = A[-1]
    left_range = range(N, right, -1)
    unused -= set(left_range) | set(A[:-1])
    result = list(left_range) + A[:-1]
    count = 0
    for n in sorted(unused):
        if count == K - 1:
            break
        if n >= result[-1]:
            break
        unused -= {n}
        result += [n]
        count += 1
    for i in sorted(unused, reverse=True):
        result += [i]
    print(" ".join(map(str, result)))


def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(K)]  # type: "List[int]"
    solve(N, K, A)


if __name__ == '__main__':
    main()
