#!/usr/bin/env python3
# Generated by AtCoder Tools 2.8.0
# Copyright 2021 Yuichiro Smith
import sys


def solve(_N: int, K: int, A: "List[int]"):
    fun_dict = {}
    for x in A:
        fun_dict[x] = fun_dict.get(x, 0) + 1
    A = sorted(set(A), reverse=True)
    satisfaction = 0
    for fun, next_fun in zip(A, A[1:] + [0]):
        count = fun_dict.pop(fun)
        quotient, mod = divmod(K, count)
        if fun - quotient > next_fun:
            if mod:
                K -= mod
                satisfaction += (fun - quotient) * mod
            bottom = fun - quotient + 1
            K -= count * quotient
            satisfaction += (fun + bottom) * quotient * count // 2
            break
        n = fun - next_fun
        K -= count * n
        satisfaction += (fun + next_fun + 1) * n * count // 2
        if next_fun == 0:
            break
        fun_dict[next_fun] += count

    print(satisfaction)
    return


def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A)


if __name__ == '__main__':
    main()
