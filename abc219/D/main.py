#!/usr/bin/env python3
# Generated by AtCoder Tools 2.8.0
# Copyright 2021 Yuichiro Smith
import sys


def solve(N: int, X: int, Y: int, A: "List[int]", B: "List[int]"):
    x_eaten = 0
    y_eaten = 0
    lunches = []
    for x, y in zip(A, B):
        x_eaten += x
        y_eaten += y
        lunches.append((x, y))
    if x_eaten < X or y_eaten < Y:
        print(-1)
        return
    lunches.sort()
    min_lunches = len(lunches)
    for x, y in lunches:
        if x_eaten - x < X and y_eaten - y < Y:
            break
        if x_eaten - x < X:
            continue
        if y_eaten - y < Y:
            continue
        x_eaten -= x
        y_eaten -= y
        min_lunches -= 1
    print(min_lunches)
    return


def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, X, Y, A, B)


if __name__ == '__main__':
    main()
