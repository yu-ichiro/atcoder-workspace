#!/usr/bin/env python3
# Generated by AtCoder Tools 2.8.0
# Copyright 2021 Yuichiro Smith
import sys


def solve(N: int, X: int, Y: int, A: "List[int]", B: "List[int]"):
    INF = N+1
    dp = [
        [
            [
                INF
                for _ in range(X + 1)
            ]
            for _ in range(Y + 1)
        ]
        for _ in range(N + 1)
    ]

    dp[0][0][0] = 0
    for i, (x, y) in enumerate(zip(A, B)):
        i += 1
        for j in range(Y+1):
            for k in range(X+1):
                if dp[i-1][j][k] == INF:
                    continue
                jy = min(Y, j + y)
                kx = min(X, k + x)
                dp[i][jy][kx] = min(dp[i][jy][kx], dp[i-1][j][k] + 1)
                dp[i][j][k] = min(dp[i][j][k], dp[i-1][j][k])
        # print((x, y))
        # print("\n".join([
        #     ", ".join(map(str, row))
        #     for row in dp[i]
        # ]))
    print(dp[N][Y][X] if dp[N][Y][X] != INF else -1)
    return


def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, X, Y, A, B)


if __name__ == '__main__':
    main()
