#!/usr/bin/env python3
# Generated by AtCoder Tools 2.8.0
# Copyright 2021 Yuichiro Smith
import sys


def solve(S: str, K: int):
    x, y = 0, 0
    cleansed_grid = {(0, 0)}
    k = K
    cleansed = 0
    previous_delta = 0
    while k > 0:
        k -= 1
        for s in S:
            if s == "R":
                x += 1
            if s == "L":
                x -= 1
            if s == "D":
                y += 1
            if s == "U":
                y -= 1
            grid = x, y
            if grid not in cleansed_grid:
                cleansed_grid.add(grid)
        delta = len(cleansed_grid) - cleansed
        cleansed += delta
        if delta == previous_delta:
            cleansed += delta * k
            break
        else:
            previous_delta = delta
    print(cleansed)


def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    S = next(tokens)  # type: str
    K = int(next(tokens))  # type: int
    solve(S, K)


if __name__ == '__main__':
    main()
