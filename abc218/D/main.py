#!/usr/bin/env python3
# Generated by AtCoder Tools 2.8.0
# Copyright 2021 Yuichiro Smith
import sys
from collections import defaultdict
from itertools import combinations


def solve(N: int, X: "List[int]", Y: "List[int]"):
    points = list(enumerate(zip(X, Y)))
    point_y_map = defaultdict(set)
    point_x_map = defaultdict(set)
    y_graph = defaultdict(set)
    x_graph = defaultdict(set)

    for i, (x, y) in points:
        point_x_map[x].add(i)
        point_y_map[y].add(i)
    for x, column in point_x_map.items():
        if len(column) == 1:
            continue
        for p1, p2 in combinations(column, 2):
            x_graph[p1].add(p2)
    for y, row in point_y_map.items():
        if len(row) == 1:
            continue
        for p1, p2 in combinations(row, 2):
            y_graph[p1].add(p2)

    result = 0
    for p0, graph in x_graph.items():
        if p0 not in y_graph:
            continue
        for p1 in graph:
            if p1 not in y_graph:
                continue
            for p2 in y_graph[p0]:
                if p2 not in x_graph:
                    continue
                if y_graph[p1] & x_graph[p2]:
                    result += 1
    print(result)


def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, x, y)


if __name__ == '__main__':
    main()
