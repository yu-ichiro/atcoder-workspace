#!/usr/bin/env python3
# Generated by 2.6.0
# Copyright 2021 Yuichiro Smith
import sys

sys.setrecursionlimit(10**9)

seen = set()


def output(i: int = None):
    print(f"{i+1}" if i is not None else " ", end="")


# 深さ優先探索 + 処理の前後に出力関数を挟んでいる
def dfs(graph, i) -> "List[str]":
    output(i)
    seen.add(i)
    for nxt in graph[i]:
        if nxt not in seen:
            output()
            dfs(graph, nxt)
            output()
            output(i)
    return


def solve(N: int, A: "List[int]", B: "List[int]"):
    graph = [
        [] for _ in range(N)
    ]
    # 無向グラフを作る
    # この時、(x, y)と(y, x)が同一視できることに注意して辞書順にソートすることで、その後のソートを省くことができる
    for a, b in sorted([(a, b) if a < b else (b, a) for a, b in zip(A, B)]):
        x, y = map(lambda n: n - 1, (a, b))
        graph[x].append(y)
        graph[y].append(x)
    dfs(graph, 0)
    print()
    return


def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)


if __name__ == '__main__':
    main()
