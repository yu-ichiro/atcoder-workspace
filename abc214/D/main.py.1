#!/usr/bin/env python3
import sys
from itertools import product


def solve(N: int, U: "List[int]", V: "List[int]", W: "List[int]"):
    graph = {}
    weightmap = {}
    for u, v, w in zip(U, V, W):
        graph.setdefault(u, set()).add(v)
        graph.setdefault(v, set()).add(u)
        weightmap[frozenset({u, v})] = w
    for node in sorted(graph, key=lambda n: len(graph[n]), reverse=True):
        target = set(range(1, N+1)) - {node} - graph[node]
        for t, d in product(target, graph[node]):
            edge_orig = frozenset({node, d})
            edge = frozenset({t, d})
            if edge in weightmap:
                weightmap[frozenset({node, t})] = max(weightmap[edge_orig], weightmap[edge])
    print(sum(weightmap.values()))
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    u = [int()] * (N - 1)  # type: "List[int]"
    v = [int()] * (N - 1)  # type: "List[int]"
    w = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        u[i] = int(next(tokens))
        v[i] = int(next(tokens))
        w[i] = int(next(tokens))
    solve(N, u, v, w)

if __name__ == '__main__':
    main()
