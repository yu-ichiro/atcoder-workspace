#!/usr/bin/env python3
import sys


def solve(N: int, U: "List[int]", V: "List[int]", W: "List[int]"):
    union_find = [-1 for _ in range(N)]
    def root(x):
        return x if union_find[x] < 0 else root(union_find[x])
    def size(x):
        return -union_find[root(x)]
    def union(x, y):
        x, y = map(root, (x, y))
        if size(y) > size(x):
            x, y = y, x
        union_find[x] += union_find[y]
        union_find[y] = x

    edges = [(w, u-1, v-1) for u, v, w in zip(U, V, W)]
    edges.sort()

    cost = 0
    for w, u, v in edges:
        cost += w * size(u) * size(v)
        union(u, v)
    print(cost)

    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    u = [int()] * (N - 1)  # type: "List[int]"
    v = [int()] * (N - 1)  # type: "List[int]"
    w = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        u[i] = int(next(tokens))
        v[i] = int(next(tokens))
        w[i] = int(next(tokens))
    solve(N, u, v, w)

if __name__ == '__main__':
    main()
